Devlog
Log:
1/15: Started project. Created outline for project. John given job of creating a parser while Emre makes the GUI representation.
1/16: Planning for project. Discussed order of operations and methods that Parser.java must complete.GUI starting to take form.
1/17: Created constructor for Parser.java. Took a String and kept it as a String. Created simplifyCo method which took a coefficient. More components added to GUI
1/18: Major Parser work day. A lot of robustification of code. ArrayList format introduced in replace of String. Parser becomes a lot stronger with many new operators allowed. Try catch blocks robustify much of the code.
1/19: Parser now takes a lot of different equations. Still some errors in unreal answers but generally alright. Roots and asymptotes functionality included however there are many glitches involved. Major GUI work day: the Parser and the GraphingCalculator classes are combined. Pixel-to-coordinate conversions are formulated, allowing graphs to finally take shape. GraphingCalculator class can take an input and run through Parser however the shapes of the graphs are rough and shoddy.
1/20: Final step to make GraphingCalculator successfully display accurate graphs is made. IsValid method of the GraphingCalculator class is still having issues. Asymptotes and roots functionality are working better. Can now handle imaginary solutions and can deal with it appropriately.
1/21: Roots and asymptotes now work with the perfection of the findImportant method.
1/22: Much fewer glitches in the GUI. Starts with preset dimensions. IsValid method still throws runtime errors. Roots and asymptotes functionality works better and are more precise. Duplicates are dealt with.
1/23: Project completed. Buttons now work and will return the asymptotes and intercepts. isValid was also robustified greatly with the use of a try catch block.

Obstacles Overcome: An obstacle that need to be overcome during the parsing of the equation was to maintain order of operations and to keep the elements of the array in the correct order so as to avoid errors. This was accomplished through the innerParens and simplifyStep methods. When used together, the parser would search for the innermost parentheses and find an answer and build outward until the length of the ArrayList is one. Another huge challenge was combining the functionality of the two classes to create the graphs (this resulted in lines 49-61 of the GraphingCalculator class; the MAGIC). Formulas had to be derived to convert pixel coordinates to actual coordinates on the cartesian plane given any function and any viewing window.

Unresolved Issues: As it is, the GUI can only handle square viewing screens. Also, we have an issue in which graphs that increase or decrease at an exponential or just a few high rate do not look to be connected. This is because the dots are greatly spaced apart from each other. Another issue is that with input functions such as cosx or sinx that can have infinitely many x-intercepts in a given interval, it would be impossible for us to list all of them out on the button panel. It would not fit. However, it lists all x-intercepts for sin and cos functions that are not squeezed and for all functions that do not have that many x-intercepts.

Cool Stuff Learned: An extremely helpful skill learned was the try catch block. This allowed John’s parser to be able to handle errors and process what they mean. It also allowed for implementation of the isValid method in GraphingCalculator.java, which, prior to John’s recommendation of a try-catch block, consisted of many, many blocks of possible cases. Another important thing learned was GUI implementation: using Swing components and the ActionListener interface. Also, Emre confirmed by his experience what an adult in compsci world told him, that “Coders are always learning something new.” When undertaking a cs project, you’ll never know all that you need to know to complete it, and therefore you must teach yourself what you do not know to complete the project.

Mid-Development Design changes: The parser class is designed to take a String as an input. During the construction of the Parser class, John decided to transform the input String into an ArrayList of String elements. This ArrayList would be separated into numbers and doubles and operators. This would allow easy access for the parsing of the equation. This was mentioned above, but mid-development we seriously simplified isValid. Unfortunately, due to the limitations of the deadline, we had to cut functionality. Originally we had intended to be able return extrema and points of inflection for the graph, but our final product does not do this.

Lessons Learned: Organizing and pre planning is an extremely useful and time efficient strategy. Before getting into the grit of coding out our ideas we had a basic sketch of what we wanted to see happen. Also, more comments is better than less comments. As mentioned above, cs projects entail a lot of learning of new concepts and practices. It is better to take care of the self-teaching part before diving into coding, because you might teach yourself something that will save you a lot of time when you code (such as a try-catch block).
