import java.util.ArrayList;
public class GraphCalc {
    private ArrayList<String> equation;
    private String[] numbers = {"1","2","3","4","5","6","7","8","9","0"}; 

    public GraphCalc() {
	equation = new ArrayList<String>();
    }
    
        public GraphCalc(String input) {
	equation = new ArrayList<String>();
	String numberString = "";
	for (int i = 0; i < input.length(); i++) {
	    if (binSearchIter(numbers, input.substring(i,i+1)) != -1) {
		numberString = numberString + input.substring(i,i+1);
	    }
	    else {
		equation.add(numberString);
		equation.add(input.substring(i,i+1));
		numberString = "";
	    }
	}
    
    public ArrayList<String> simplifyCo() { 
	for (int i = 1; i < equation.size(); i++) {
	    if (equation.get(i).equals( "x") || equation.get(i).equals("(")) {
		if ((BinSearch2.binSearch(numbers, equation.get(i-1))) != -1) {
			equation.add(i-1, "*");
		    }
		break;
	    }
	}
	return equation;
    }

    
    /*
    // Finds last instance of open parens and first instance of closer parens
    public static String innerParens(String equation) {
	int openParens = 0;
	int closedParens = 0;
	for (int i = 0; i < equation.length(); i++) {
	    if (equation.substring(i,i+1).equals( "(")) {
		openParens = i;
	    }
	    if (equation.substring (i,i+1).equals( ")")) {
		closedParens = i;
		break;
	    }
	}
	if (closedParens == 0) {
	    return equation;
	}
	else { return equation.substring(openParens + 1, closedParens);}
    }
    */
    public ArrayList<String> simplifyStep(ArrayList<String> step) {
	for (int i = 1; i < step.size(); i++) {
	    if (step.get(i).equals("+")) {
		double answer = Double.parseDouble(step.get(i-1)) + Double.parseDouble(step.get(i+1));
		step.set(i, Double.toString(answer));
		step.remove(i-1);
		step.remove(i+1);
	}
	}
	return step;
    }		
    public static void main( String[] args) {
	ArrayList<String> tester = new ArrayList<String>();
	tester.add("5");
	int x = 5;
	System.out.println((5*x + 4));
	System.out.println(tester);
    }
}
